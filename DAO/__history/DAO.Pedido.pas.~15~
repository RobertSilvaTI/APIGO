unit DAO.Pedido;

interface

uses FireDAC.Comp.Client, FireDAC.DApt, Data.DB, System.JSON, System.SysUtils,
System.StrUtils, System.Variants, Dataset.Serialize, DAO.Connection;

type
  TPedido = class
    private
      FConn: TFDConnection;
      FID_USUARIO: integer;
      FID_PEDIDO: integer;
      FID_CUPOM: integer;
      FAVALIACAO: integer;
      FID_ESTABELECIMENTO: integer;
      FVL_TAXA_ENTREGA: double;
      FVL_DESCONTO: double;
      FVL_TOTAL: double;
      FBAIRRO: string;
      FCOD_CIDADE: string;
      FUF: string;
      FCEP: string;
      FSTATUS: string;
      FCOMPLEMENTO: string;
      FCIDADE: string;
      FENDERECO: string;

      procedure Validate(operacao: string);
    public
      constructor Create;
      destructor Destroy; override;

      property ID_USUARIO: integer read FID_USUARIO write FID_USUARIO;
      property ID_CUPOM: integer read FID_CUPOM write FID_CUPOM;
      property AVALIACAO: integer read FAVALIACAO write FAVALIACAO;
      property ID_PEDIDO: integer read FID_PEDIDO write FID_PEDIDO;
      property ID_ESTABELECIMENTO: integer read FID_ESTABELECIMENTO write FID_ESTABELECIMENTO;

      property VL_TAXA_ENTREGA: double read FVL_TAXA_ENTREGA write FVL_TAXA_ENTREGA;
      property VL_DESCONTO: double read FVL_DESCONTO write FVL_DESCONTO;
      property VL_TOTAL: double read FVL_TOTAL write FVL_TOTAL;

      property ENDERECO: string read FENDERECO write FENDERECO;
      property COMPLEMENTO: string read FCOMPLEMENTO write FCOMPLEMENTO;
      property UF: string read FUF write FUF;
      property CIDADE: string read FCIDADE write FCIDADE;
      property BAIRRO: string read FBAIRRO write FBAIRRO;
      property CEP: string read FCEP write FCEP;
      property COD_CIDADE: string read FCOD_CIDADE write FCOD_CIDADE;
      property STATUS: string read FSTATUS write FSTATUS;

      function Listar(cod_cidade: string): TJSONArray;
      procedure Avaliar;
      procedure Inserir;
  end;

implementation

{ TPedido }

constructor TPedido.Create;
begin
  FConn := TConnection.CreateConnection;
end;

destructor TPedido.Destroy;
begin
  if Assigned(FConn) then
    FConn.Free;
  inherited;
end;

function TPedido.Listar(cod_cidade: string): TJSONArray;
var
  qry: TFDQuery;
begin
  Validate('Listar');

  try
    qry := TFDQuery.Create(nil);
    qry.Connection := FConn;

    with qry do
    begin
      Active := False;
      SQL.Clear;
      SQL.Add('select p.id_pedido, p.id_estabelecimento, e.nome, count(*) as qtd_item, ');
      SQL.Add('p.vl_total, p.dt_pedido, e.url_logo, coalesce(p.avaliacao,0) as avaliacao, ');
      SQL.Add('p.status');
      SQL.Add('from tab_pedido p');
      SQL.Add('join tab_estabelecimento e on e.id_estabelecimento = p.id_estabelecimento');
      SQL.Add('join tab_pedido_item i on i.id_pedido = p.id_pedido');
      SQL.Add('where p.id_usuario = :id_usuario');
      SQL.Add('group by p.id_pedido, p.id_estabelecimento, e.nome, ');
      SQL.Add('p.vl_total, p.dt_pedido, e.url_logo, avaliacao, p.status');
      SQL.Add('order by p.id_pedido desc');

      ParamByName('id_usuario').Value := id_usuario;

      Active := True;
    end;

    Result := qry.ToJSONArray();

  finally
    qry.Free;
  end;
end;

procedure TPedido.Avaliar;
var
  qry: TFDQuery;
begin
  Validate('Avaliar');

  try
    qry := TFDQuery.Create(nil);
    qry.Connection := FConn;

    with qry do
    begin
      Active := False;
      SQL.Clear;
      SQL.Add('update tab_pedido set avaliacao = :avaliacao');
      SQL.Add('where id_pedido = :id_pedido');
      SQL.Add('returning id_estabelecimento');
      ParamByName('avaliacao').Value := avaliacao;
      ParamByName('id_pedido').Value := id_pedido;
      Active := True;

      ID_ESTABELECIMENTO := FieldByName('id_estabelecimento').AsInteger;

      // Atualização de estatísticas do estabelecimento
      Active := False;
      SQL.Clear;
      SQL.Add('update tab_estabelecimento set qtd_avaliacao = ');
      SQL.Add('(select count(*) from tab_pedido p where p.avaliacao > 0');
      SQL.Add('and p.id_estabelecimento = :id_estabelecimento), ');
      SQL.Add('avaliacao = (select avg(avaliacao) from tab_pedido p');
      SQL.Add('where p.avaliacao > 0 and p.id_estabelecimento = :id_estabelecimento)');
      SQL.Add('where id_estabelecimento = :id_estabelecimento');
      ParamByName('id_estabelecimento').Value := id_estabelecimento;
      ExecSQL;
    end;

  finally
    qry.Free;
  end;
end;

procedure TPedido.Inserir;
var
  qry: TFDQuery;
begin
  Validate('Inserir');

  try
    qry := TFDQuery.Create(nil);
    qry.Connection := FConn;

    with qry do
    begin
      Active := False;
      SQL.Clear;
      SQL.Add('insert into tab_pedido(id_usuario, id_estabelecimento, id_cupom, ');
      SQL.Add('vl_taxa_entrega, vl_desconto, vl_total, dt_pedido, status, avaliacao, endereco, ');
      SQL.Add('complemnto, bairro, cidade, uf, cep, cod_cidade) ');
      SQL.Add('values(:id_usuario, :id_estabelecimento, :id_cupom, :vl_taxa_entrega, ');
      SQL.Add(':vl_desconto, :vl_total, current_timestamp, :status, :avaliacao, :endereco, ');
      SQL.Add(':complemnto, :bairro, :cidade, :uf, :cep, :cod_cidade) ');
      SQL.Add('returnig id_pedido');

      ParamByName('id_usuario').Value := ID_USUARIO;
      ParamByName('id_estabelecimento').Value := ID_ESTABELECIMENTO;

      if id_cupom > 0 then
      begin
        ParamByName('id_cupom').Value := ID_CUPOM;
      end
      else
      begin
        ParamByName('id_cupom').DataType := ftInteger;
        ParamByName('id_cupom').Value := Unassigned;
      end;

      ParamByName('vl_taxa_entrega').Value := VL_TAXA_ENTREGA;
      ParamByName('vl_desconto').Value := VL_DESCONTO;
      ParamByName('vl_total').Value := VL_TOTAL;
      ParamByName('status').Value := STATUS;
      ParamByName('avaliacao').Value := AVALIACAO;

      ParamByName('endereco').Value := ENDERECO;
      ParamByName('complemento').Value := COMPLEMENTO;
      ParamByName('bairro').Value := BAIRRO;
      ParamByName('cidade').Value := CIDADE;
      ParamByName('uf').Value := UF;
      ParamByName('cep').Value := CEP;
      ParamByName('cod_cidade').Value := COD_CIDADE;

      Active := True;

      ID_PEDIDO := FieldByName('id_pedido').AsInteger;
    end;

  finally
    qry.Free;
  end;
end;

procedure TPedido.Validate(operacao: string);
begin
  if (ID_USUARIO <= 0) and MatchStr(operacao, ['Listar']) then
    raise Exception.Create('ID de usuário não informado!');

  if (ID_ESTABELECIMENTO <= 0) and MatchStr(operacao, ['Inserir']) then
    raise Exception.Create('ID do estabelecimento não informado!');

  if (STATUS.IsEmpty) and MatchStr(operacao, ['Inserir']) then
    raise Exception.Create('Status não informado!');

  if (ENDERECO.IsEmpty) and MatchStr(operacao, ['Inserir']) then
    raise Exception.Create('Endereço não informado!');

  if (BAIRRO.IsEmpty) and MatchStr(operacao, ['Inserir']) then
    raise Exception.Create('Bairro não informado!');

  if (CIDADE.IsEmpty) and MatchStr(operacao, ['Inserir']) then
    raise Exception.Create('Cidade não informada!');

  if (UF.IsEmpty) and MatchStr(operacao, ['Inserir']) then
    raise Exception.Create('UF não informada!');

  if (CEP.IsEmpty) and MatchStr(operacao, ['Inserir']) then
    raise Exception.Create('CEP não informado!');

  if (COD_CIDADE.IsEmpty) and MatchStr(operacao, ['Inserir']) then
    raise Exception.Create('Código de cidade não informado!');

  if (AVALIACAO <= 0) and MatchStr(operacao, ['Avaliar']) then
    raise Exception.Create('Avaliação não inserida!');

  if (ID_PEDIDO <= 0) and MatchStr(operacao, ['Avaliar']) then
    raise Exception.Create('ID do pedido não informado!');
end;

end.
